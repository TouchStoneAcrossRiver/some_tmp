// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: demo.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "demo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace protocol {
namespace recsys {
namespace deldup {
class RecItemDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RecItem> {
} _RecItem_default_instance_;
class RecItemArrDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RecItemArr> {
} _RecItemArr_default_instance_;

namespace protobuf_demo_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[2];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecItem, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecItem, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecItem, videoid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecItem, score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecItem, country_code_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecItemArr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecItemArr, recitem_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(RecItem)},
  { 10, -1, sizeof(RecItemArr)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_RecItem_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RecItemArr_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "demo.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

}  // namespace

void TableStruct::Shutdown() {
  _RecItem_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _RecItemArr_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _RecItem_default_instance_.DefaultConstruct();
  _RecItemArr_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\ndemo.proto\022\026protocol.recsys.deldup\"`\n\007"
      "RecItem\022\021\n\ttimestamp\030\001 \001(\004\022\014\n\004type\030\002 \001(\r"
      "\022\017\n\007videoid\030\003 \001(\004\022\r\n\005score\030\004 \001(\001\022\024\n\014coun"
      "try_code\030\005 \001(\t\">\n\nRecItemArr\0220\n\007recitem\030"
      "\001 \003(\0132\037.protocol.recsys.deldup.RecItemb\006"
      "proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 206);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "demo.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_demo_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RecItem::kTimestampFieldNumber;
const int RecItem::kTypeFieldNumber;
const int RecItem::kVideoidFieldNumber;
const int RecItem::kScoreFieldNumber;
const int RecItem::kCountryCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RecItem::RecItem()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_demo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.recsys.deldup.RecItem)
}
RecItem::RecItem(const RecItem& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  country_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.country_code().size() > 0) {
    country_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.country_code_);
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&timestamp_) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:protocol.recsys.deldup.RecItem)
}

void RecItem::SharedCtor() {
  country_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&timestamp_, 0, reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&timestamp_) + sizeof(type_));
  _cached_size_ = 0;
}

RecItem::~RecItem() {
  // @@protoc_insertion_point(destructor:protocol.recsys.deldup.RecItem)
  SharedDtor();
}

void RecItem::SharedDtor() {
  country_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RecItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecItem::descriptor() {
  protobuf_demo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_demo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RecItem& RecItem::default_instance() {
  protobuf_demo_2eproto::InitDefaults();
  return *internal_default_instance();
}

RecItem* RecItem::New(::google::protobuf::Arena* arena) const {
  RecItem* n = new RecItem;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RecItem::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.recsys.deldup.RecItem)
  country_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&timestamp_, 0, reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&timestamp_) + sizeof(type_));
}

bool RecItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.recsys.deldup.RecItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 videoid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &videoid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double score = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string country_code = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_country_code()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->country_code().data(), this->country_code().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "protocol.recsys.deldup.RecItem.country_code"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.recsys.deldup.RecItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.recsys.deldup.RecItem)
  return false;
#undef DO_
}

void RecItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.recsys.deldup.RecItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 timestamp = 1;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->timestamp(), output);
  }

  // uint32 type = 2;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }

  // uint64 videoid = 3;
  if (this->videoid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->videoid(), output);
  }

  // double score = 4;
  if (this->score() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->score(), output);
  }

  // string country_code = 5;
  if (this->country_code().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->country_code().data(), this->country_code().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protocol.recsys.deldup.RecItem.country_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->country_code(), output);
  }

  // @@protoc_insertion_point(serialize_end:protocol.recsys.deldup.RecItem)
}

::google::protobuf::uint8* RecItem::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.recsys.deldup.RecItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 timestamp = 1;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->timestamp(), target);
  }

  // uint32 type = 2;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }

  // uint64 videoid = 3;
  if (this->videoid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->videoid(), target);
  }

  // double score = 4;
  if (this->score() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->score(), target);
  }

  // string country_code = 5;
  if (this->country_code().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->country_code().data(), this->country_code().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protocol.recsys.deldup.RecItem.country_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->country_code(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:protocol.recsys.deldup.RecItem)
  return target;
}

size_t RecItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.recsys.deldup.RecItem)
  size_t total_size = 0;

  // string country_code = 5;
  if (this->country_code().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->country_code());
  }

  // uint64 timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->timestamp());
  }

  // uint64 videoid = 3;
  if (this->videoid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->videoid());
  }

  // double score = 4;
  if (this->score() != 0) {
    total_size += 1 + 8;
  }

  // uint32 type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecItem::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.recsys.deldup.RecItem)
  GOOGLE_DCHECK_NE(&from, this);
  const RecItem* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RecItem>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.recsys.deldup.RecItem)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.recsys.deldup.RecItem)
    MergeFrom(*source);
  }
}

void RecItem::MergeFrom(const RecItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.recsys.deldup.RecItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.country_code().size() > 0) {

    country_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.country_code_);
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.videoid() != 0) {
    set_videoid(from.videoid());
  }
  if (from.score() != 0) {
    set_score(from.score());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void RecItem::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.recsys.deldup.RecItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecItem::CopyFrom(const RecItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.recsys.deldup.RecItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecItem::IsInitialized() const {
  return true;
}

void RecItem::Swap(RecItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RecItem::InternalSwap(RecItem* other) {
  country_code_.Swap(&other->country_code_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(videoid_, other->videoid_);
  std::swap(score_, other->score_);
  std::swap(type_, other->type_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RecItem::GetMetadata() const {
  protobuf_demo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_demo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RecItem

// uint64 timestamp = 1;
void RecItem::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 RecItem::timestamp() const {
  // @@protoc_insertion_point(field_get:protocol.recsys.deldup.RecItem.timestamp)
  return timestamp_;
}
void RecItem::set_timestamp(::google::protobuf::uint64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:protocol.recsys.deldup.RecItem.timestamp)
}

// uint32 type = 2;
void RecItem::clear_type() {
  type_ = 0u;
}
::google::protobuf::uint32 RecItem::type() const {
  // @@protoc_insertion_point(field_get:protocol.recsys.deldup.RecItem.type)
  return type_;
}
void RecItem::set_type(::google::protobuf::uint32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:protocol.recsys.deldup.RecItem.type)
}

// uint64 videoid = 3;
void RecItem::clear_videoid() {
  videoid_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 RecItem::videoid() const {
  // @@protoc_insertion_point(field_get:protocol.recsys.deldup.RecItem.videoid)
  return videoid_;
}
void RecItem::set_videoid(::google::protobuf::uint64 value) {
  
  videoid_ = value;
  // @@protoc_insertion_point(field_set:protocol.recsys.deldup.RecItem.videoid)
}

// double score = 4;
void RecItem::clear_score() {
  score_ = 0;
}
double RecItem::score() const {
  // @@protoc_insertion_point(field_get:protocol.recsys.deldup.RecItem.score)
  return score_;
}
void RecItem::set_score(double value) {
  
  score_ = value;
  // @@protoc_insertion_point(field_set:protocol.recsys.deldup.RecItem.score)
}

// string country_code = 5;
void RecItem::clear_country_code() {
  country_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RecItem::country_code() const {
  // @@protoc_insertion_point(field_get:protocol.recsys.deldup.RecItem.country_code)
  return country_code_.GetNoArena();
}
void RecItem::set_country_code(const ::std::string& value) {
  
  country_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.recsys.deldup.RecItem.country_code)
}
#if LANG_CXX11
void RecItem::set_country_code(::std::string&& value) {
  
  country_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.recsys.deldup.RecItem.country_code)
}
#endif
void RecItem::set_country_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  country_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.recsys.deldup.RecItem.country_code)
}
void RecItem::set_country_code(const char* value, size_t size) {
  
  country_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.recsys.deldup.RecItem.country_code)
}
::std::string* RecItem::mutable_country_code() {
  
  // @@protoc_insertion_point(field_mutable:protocol.recsys.deldup.RecItem.country_code)
  return country_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RecItem::release_country_code() {
  // @@protoc_insertion_point(field_release:protocol.recsys.deldup.RecItem.country_code)
  
  return country_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RecItem::set_allocated_country_code(::std::string* country_code) {
  if (country_code != NULL) {
    
  } else {
    
  }
  country_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), country_code);
  // @@protoc_insertion_point(field_set_allocated:protocol.recsys.deldup.RecItem.country_code)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RecItemArr::kRecitemFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RecItemArr::RecItemArr()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_demo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.recsys.deldup.RecItemArr)
}
RecItemArr::RecItemArr(const RecItemArr& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      recitem_(from.recitem_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protocol.recsys.deldup.RecItemArr)
}

void RecItemArr::SharedCtor() {
  _cached_size_ = 0;
}

RecItemArr::~RecItemArr() {
  // @@protoc_insertion_point(destructor:protocol.recsys.deldup.RecItemArr)
  SharedDtor();
}

void RecItemArr::SharedDtor() {
}

void RecItemArr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecItemArr::descriptor() {
  protobuf_demo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_demo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RecItemArr& RecItemArr::default_instance() {
  protobuf_demo_2eproto::InitDefaults();
  return *internal_default_instance();
}

RecItemArr* RecItemArr::New(::google::protobuf::Arena* arena) const {
  RecItemArr* n = new RecItemArr;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RecItemArr::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.recsys.deldup.RecItemArr)
  recitem_.Clear();
}

bool RecItemArr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.recsys.deldup.RecItemArr)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protocol.recsys.deldup.RecItem recitem = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_recitem()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.recsys.deldup.RecItemArr)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.recsys.deldup.RecItemArr)
  return false;
#undef DO_
}

void RecItemArr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.recsys.deldup.RecItemArr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .protocol.recsys.deldup.RecItem recitem = 1;
  for (unsigned int i = 0, n = this->recitem_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->recitem(i), output);
  }

  // @@protoc_insertion_point(serialize_end:protocol.recsys.deldup.RecItemArr)
}

::google::protobuf::uint8* RecItemArr::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.recsys.deldup.RecItemArr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .protocol.recsys.deldup.RecItem recitem = 1;
  for (unsigned int i = 0, n = this->recitem_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->recitem(i), deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:protocol.recsys.deldup.RecItemArr)
  return target;
}

size_t RecItemArr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.recsys.deldup.RecItemArr)
  size_t total_size = 0;

  // repeated .protocol.recsys.deldup.RecItem recitem = 1;
  {
    unsigned int count = this->recitem_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->recitem(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecItemArr::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.recsys.deldup.RecItemArr)
  GOOGLE_DCHECK_NE(&from, this);
  const RecItemArr* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RecItemArr>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.recsys.deldup.RecItemArr)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.recsys.deldup.RecItemArr)
    MergeFrom(*source);
  }
}

void RecItemArr::MergeFrom(const RecItemArr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.recsys.deldup.RecItemArr)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  recitem_.MergeFrom(from.recitem_);
}

void RecItemArr::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.recsys.deldup.RecItemArr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecItemArr::CopyFrom(const RecItemArr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.recsys.deldup.RecItemArr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecItemArr::IsInitialized() const {
  return true;
}

void RecItemArr::Swap(RecItemArr* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RecItemArr::InternalSwap(RecItemArr* other) {
  recitem_.InternalSwap(&other->recitem_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RecItemArr::GetMetadata() const {
  protobuf_demo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_demo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RecItemArr

// repeated .protocol.recsys.deldup.RecItem recitem = 1;
int RecItemArr::recitem_size() const {
  return recitem_.size();
}
void RecItemArr::clear_recitem() {
  recitem_.Clear();
}
const ::protocol::recsys::deldup::RecItem& RecItemArr::recitem(int index) const {
  // @@protoc_insertion_point(field_get:protocol.recsys.deldup.RecItemArr.recitem)
  return recitem_.Get(index);
}
::protocol::recsys::deldup::RecItem* RecItemArr::mutable_recitem(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.recsys.deldup.RecItemArr.recitem)
  return recitem_.Mutable(index);
}
::protocol::recsys::deldup::RecItem* RecItemArr::add_recitem() {
  // @@protoc_insertion_point(field_add:protocol.recsys.deldup.RecItemArr.recitem)
  return recitem_.Add();
}
::google::protobuf::RepeatedPtrField< ::protocol::recsys::deldup::RecItem >*
RecItemArr::mutable_recitem() {
  // @@protoc_insertion_point(field_mutable_list:protocol.recsys.deldup.RecItemArr.recitem)
  return &recitem_;
}
const ::google::protobuf::RepeatedPtrField< ::protocol::recsys::deldup::RecItem >&
RecItemArr::recitem() const {
  // @@protoc_insertion_point(field_list:protocol.recsys.deldup.RecItemArr.recitem)
  return recitem_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace deldup
}  // namespace recsys
}  // namespace protocol

// @@protoc_insertion_point(global_scope)
